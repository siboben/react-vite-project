# React Hooks Assignments ??

## Assignment 1: Counter App
### Objective: Learn the basics of useState and useEffect

#### Requirements
1. Create a counter app with buttons to "Increment" and "Decrement" the counter
2. Use `useState` to manage the counter value
3. Add a reset button to reset the count to 0
4. Use `useEffect` to log a message each time the counter value changes

#### ?? Bonus Challenge
- Add a timeout feature with `useEffect` to automatically increment the counter by 1 every second

---

## Assignment 2: Countdown Timer
### Objective: Practice managing time-based state updates

#### Requirements
1. Create a countdown timer that starts from 10 and counts down to 0
2. Use `useState` for the timer value
3. Use `useEffect` with `setInterval` to decrease the timer by 1 every second
4. Stop the countdown at 0

#### ?? Bonus Challenge
- Add a button to restart the countdown from 10

---

## Assignment 3: Light/Dark Theme Toggle
### Objective: Use conditional rendering with state

#### Requirements
1. Create a light/dark theme toggle button
2. Use `useState` to manage the theme (e.g., isDarkTheme)
3. When the theme changes, update the background and text colors
4. Use `useEffect` to log a message to the console each time the theme changes

#### ?? Bonus Challenge
- Allow the theme selection to persist by saving it in localStorage

---

## Assignment 4: Character Count Tracker
### Objective: Track input changes using state

#### Requirements
1. Create a text input field where users can type
2. Use `useState` to track the input value
3. Display the character count below the input field
4. Use `useEffect` to log the character count each time the input changes

#### ?? Bonus Challenge
- Add a color indicator that changes based on the character count
  - Green for less than 50 characters
  - Red for more than 50 characters

---

## Assignment 5: Typing Speed Test
### Objective: Build a timed interactive app using state

#### Requirements
1. Display a short sentence for the user to type in a text input
2. Use `useState` to track:
   - User's input
   - Time left (start with 10 seconds)
3. Use `useEffect` to start a countdown once the user starts typing
4. Display the user's score (accuracy and speed) when time runs out

#### ?? Bonus Challenge
- Allow the user to reset the game
- Keep track of their highest score

---

## Assignment 6: Online/Offline Status Indicator
### Objective: Work with browser events using useEffect

#### Requirements
1. Display an indicator to show whether the user is online or offline
2. Use `useState` to manage the online/offline status
3. Use `useEffect` to add event listeners for online and offline events

#### ?? Bonus Challenge
- Display the last time the user went offline

---

## Assignment 7: Simple To-Do List
### Objective: Practice array state management

#### Requirements
1. Create an input field and an "Add" button
2. Use `useState` to manage an array of to-do items
3. Display each to-do item in a list with a "Remove" button
4. Use `useEffect` to log the updated list when items change

#### ?? Bonus Challenge
- Use localStorage to persist the list on page refresh

---

## Assignment 8: Image Carousel
### Objective: Build a simple slideshow using state

#### Requirements
1. Use `useState` to track the current image index
2. Use `useEffect` to auto-advance images every 3 seconds
3. Add "Next" and "Previous" buttons for manual control

#### ?? Bonus Challenge
- Add pause/resume functionality
- Resume slideshow automatically after 5 seconds of inactivity

---

## Assignment 9: Color Changer
### Objective: Create an interactive color picker

#### Requirements
1. Create buttons for different colors (red, blue, green)
2. Use `useState` to track the selected color
3. Change a display box's background color based on selection
4. Use `useEffect` to log each color change

#### ?? Bonus Challenge
- Add a custom color input field

---

## Assignment 10: Form with Validation
### Objective: Practice form validation with hooks

#### Requirements
1. Create a form with fields for:
   - Name
   - Email
   - Age
2. Use `useState` to track input values and validation messages
3. Use `useEffect` to validate inputs on typing
4. Display validation messages for invalid inputs

#### ?? Bonus Challenge
- Show success message when all inputs are valid
- Enable form submission only when valid

---

##  Notes for All Assignments

### Key Concepts to Focus On
- Understanding `useState`
- Proper use of `useEffect`
- Cleanup in `useEffect`
- Event handling
- Conditional rendering

### Tips for Success
1. Start simple and add features incrementally
2. Test edge cases
3. Use console.log for debugging
4. Clean up effects when necessary
5. Consider performance implications

### Common Hooks Used
- `useState`: For state management
- `useEffect`: For side effects
- Both hooks handle most cases in these assignments

### Extra Learning Resources
1. React Official Documentation
2. MDN Web Docs
3. React community forums

Remember: The goal is to understand how hooks work and when to use them appropriately!