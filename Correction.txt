import React, { useState, useEffect } from 'react';

const CharacterCountInput = () => {
  // Step 2: Set up useState to track the input value
  const [inputValue, setInputValue] = useState('');

  // Step 3: Display character count below the input field
  const characterCount = inputValue.length;

  // Step 4: Use useEffect to log the character count whenever the input changes
  useEffect(() => {
    console.log(`Character count: ${characterCount}`);
  }, [inputValue]); // Runs every time `inputValue` changes

  return (
    <div>
      <label htmlFor="textInput">Type something:</label>
      <input
        id="textInput"
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)} // Update the state when input changes
      />
      <p>Character count: {characterCount}</p> {/* Display character count */}
    </div>
  );
};

export default CharacterCountInput;


=======================================================================================================

import React, { useState, useEffect } from 'react';

const CharacterCountInput = () => {
  // Step 2: Set up useState to track the input value
  const [inputValue, setInputValue] = useState('');

  // Step 3: Display character count below the input field
  const characterCount = inputValue.length;

  // Step 4: Use useEffect to log the character count whenever the input changes
  useEffect(() => {
    console.log(`Character count: ${characterCount}`);
  }, [inputValue]); // Runs every time `inputValue` changes

  return (
    <div>
      <label htmlFor="textInput">Type something:</label>
      <input
        id="textInput"
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)} // Update the state when input changes
      />
      <p>Character count: {characterCount}</p> {/* Display character count */}
    </div>
  );
};

export default CharacterCountInput;
=================================================================================================================

import React, { useState, useEffect } from 'react';

function CharacterCounter() {
  const [inputValue, setInputValue] = useState('');
  const [charCount, setCharCount] = useState(0);

  useEffect(() => {
    setCharCount(inputValue.length);
    console.log(`Character count: ${inputValue.length}`);
  }, [inputValue]);

  // Color change logic based on character count
  const getColor = () => (charCount < 50 ? 'green' : 'red');

  return (
    <div>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Type here..."
        style={{ borderColor: getColor() }}
      />
      <p style={{ color: getColor() }}>
        Character Count: {charCount}
      </p>
    </div>
  );
}

export default CharacterCounter;


==========================================================
import React,{useEffect,useState} from 'react'

function Image({images}) {
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isPaused, setIsPaused] = useState(false);
    const [lastInteractionTime, setLastInteractionTime] = useState(Date.now());
  
    // Advance image every 3 seconds if not paused
    useEffect(() => {
      if (!isPaused) {
        const interval = setInterval(() => {
          setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
        }, 3000);
        return () => clearInterval(interval);
      }
    }, [isPaused, images.length]);
  
    // Auto-resume 5 seconds after the last manual interaction
    useEffect(() => {
      if (isPaused) {
        const resumeTimeout = setTimeout(() => {
          if (Date.now() - lastInteractionTime >= 5000) {
            setIsPaused(false);
          }
        }, 5000);
        return () => clearTimeout(resumeTimeout);
      }
    }, [isPaused, lastInteractionTime]);
  
    // Go to the next image
    const nextImage = () => {
      setCurrentIndex((currentIndex + 1) % images.length);
      setIsPaused(true);
      setLastInteractionTime(Date.now());
    };
  
    // Go to the previous image
    const prevImage = () => {
      setCurrentIndex((currentIndex - 1 + images.length) % images.length);
      setIsPaused(true);
      setLastInteractionTime(Date.now());
    };
  
    // Toggle pause/resume
    const togglePause = () => {
      setIsPaused((prevPaused) => !prevPaused);
      setLastInteractionTime(Date.now());
    };







  return (
    <div>



<div>
        <img src={images[currentIndex]} alt={`Slide ${currentIndex}`} style={{ width: '100%', height: 'auto' }} />
      </div>
      <div>
        <button onClick={prevImage}>Previous</button>
        <button onClick={nextImage}>Next</button>
        <button onClick={togglePause}>{isPaused ? 'Resume' : 'Pause'}</button>
      </div>
      <p>Current Image: {currentIndex + 1} / {images.length}</p>

    </div>
  )
}

export default Image

